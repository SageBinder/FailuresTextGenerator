import os.path
import pickle
import sys

import numpy as np
from keras.models import load_model


def sample(preds, temp=1.0):
    preds = np.asarray(preds).astype("float64")
    preds = np.log(preds) / temp
    exp_preds = np.exp(preds)
    preds = exp_preds / np.sum(exp_preds)
    probas = np.random.multinomial(1, preds, 1)
    return np.argmax(probas)


class TextGenerator:
    def __init__(self, model_path):
        print("Model path: " + os.path.abspath(model_path))
        print("Loading model...")
        try:
            self.model_path = model_path
            self.model = load_model(model_path)
            self.block_size = self.model.layers[0].input_shape[1]
        except ValueError:
            print("Error while loading model: could not load model from " + os.path.abspath(model_path))
            exit(1)
        except ImportError:
            print("Error while loading model: h5py is not available.")
            exit(1)
        except:
            print(r"Error while loading model: ¯\_(ツ)_/¯ maybe provided path doesn't exist?")
            exit(1)
        print("Model loaded successfully!")

        print("Loading character mapping...")
        try:
            reversed_dictionary_path = os.path.join(os.path.dirname(model_path), "reversed_dictionary.pkl")
            self.reversed_dictionary = pickle.load(open(reversed_dictionary_path, "rb"))

            self.message_delimiter = self.reversed_dictionary["message_delimiter"]
            self.reversed_dictionary.pop("message_delimiter")
            self.char_to_id = dict(zip(self.reversed_dictionary.values(), self.reversed_dictionary.keys()))
        except:
            print(r"Error while loading character mapping: ¯\_(ツ)_/¯")
            exit(1)
        print("Character mapping loaded successfully!")

        print("id_to_char:")
        print(self.reversed_dictionary)

        print("char_to_id:")
        print(self.char_to_id)

        print(self.model.summary())

    def generate_chars(self,
                       num_chars=500,  # Num chars to generate (duh)
                       seed_chars=None,  # Will be padded/cut to appropriate length
                       min_seed_chars_generated=15,  # Number of chars in seed_chars generated by the model
                       # (rather than being randomly generated)

                       max_seed_chars_before_delimiter=5,  # If the model takes too long to generate an <eom> in the
                       # seed, append it after this many chars (set to None for no message delimiter at end of seed)

                       random_seed=None,  # Seed to give to np.seed()
                       temperature=0.4,  # Higher temperature -> higher variance
                       digit_temperature=1.2,  # The model tends to get stuck in digit loops
                       # so we want a higher temperature when the last char was a digit

                       print_progress=False):
        np.random.seed(random_seed)

        last_seed_char = None if max_seed_chars_before_delimiter is None else self.message_delimiter
        _seed_chars = self.__generate_seed(min_iters=min_seed_chars_generated,
                                           last_char=last_seed_char,
                                           max_until_last_char=max_seed_chars_before_delimiter,
                                           starting_seed_chars=seed_chars,
                                           temperature=temperature,
                                           digit_temperature=digit_temperature,
                                           print_progress=print_progress)

        if print_progress:
            print("Generating chars...")
        generated_chars = []
        for curr_generated_idx in range(num_chars):
            next_char, _seed_chars = \
                self.__generate_next_char(seed_chars=_seed_chars,
                                          temperature=temperature,
                                          digit_temperature=digit_temperature)
            generated_chars.append(next_char)
            if print_progress:
                print(next_char + ': "' + "".join(generated_chars) + '"')

        return generated_chars, _seed_chars, self.message_delimiter

    def generate_messages(self,
                          num_messages=5,  # Num messages to generate (duh)
                          seed_chars=None,  # Will be padded/cut to appropriate length
                          min_seed_chars_generated=15,  # Number of chars in seed_chars generated by the model
                          # (rather than being randomly generated)

                          max_seed_chars_before_delimiter=5,  # If the model takes too long to generate an <eom> in the
                          # seed, append it after this many chars (set to None for no message delimiter at end of seed)

                          random_seed=None,  # Seed to give to np.seed()
                          temperature=0.4,  # Higher temperature -> higher variance
                          digit_temperature=1.2,  # The model tends to get stuck in digit loops
                          # so we want a higher temperature when the last char was a digit

                          max_message_len=200,  # Max number of chars each message can be before forcing an <eom>
                          print_progress=False):
        np.random.seed(random_seed)

        if print_progress:
            print("Generating messages...")
        _seed_chars = seed_chars
        messages = []
        for i in range(num_messages):
            message, _seed_chars = self.generate_message(seed_chars=_seed_chars,
                                                         min_seed_chars_generated=min_seed_chars_generated,
                                                         max_seed_chars_before_delimiter=max_seed_chars_before_delimiter,
                                                         random_seed=random_seed,
                                                         temperature=temperature,
                                                         digit_temperature=digit_temperature,
                                                         max_len=max_message_len,
                                                         print_progress=print_progress)
            messages.append(message)
            if print_progress:
                print("Message " + str(i) + ': "' + message + '"')
        return messages, _seed_chars

    def generate_message(self,
                         seed_chars=None,
                         min_seed_chars_generated=15,  # Number of chars in seed generated by the model
                         # (rather than being randomly generated)

                         max_seed_chars_before_delimiter=5,  # If the model takes too long to generate an <eom> in the
                         # seed, append it after this many chars (set to None for no message delimiter at end of seed)

                         random_seed=None,  # Seed to give to np.seed()
                         temperature=0.4,  # Higher temperature -> higher variance
                         digit_temperature=1.2,  # The model tends to get stuck in digit loops
                         # so we want a higher temperature when the last char was a digit

                         max_len=200,  # Max len of message
                         print_progress=False):
        np.random.seed(random_seed)

        last_seed_char = None if max_seed_chars_before_delimiter is None else self.message_delimiter
        _seed_chars = self.__generate_seed(min_iters=min_seed_chars_generated,
                                           last_char=last_seed_char,
                                           max_until_last_char=max_seed_chars_before_delimiter,
                                           starting_seed_chars=seed_chars,
                                           temperature=temperature,
                                           digit_temperature=digit_temperature,
                                           print_progress=print_progress)
        message, _seed_chars = self.__generate_until(self.message_delimiter,
                                                     seed_chars=_seed_chars,
                                                     temperature=temperature,
                                                     digit_temperature=digit_temperature,
                                                     max_len=max_len,
                                                     print_progress=print_progress)
        if message[-1] == self.message_delimiter:
            message = message[:-1]
        return "".join(message), _seed_chars

    def __generate_next_char(self, seed_chars=None, temperature=0.4, digit_temperature=1.2):
        if seed_chars is None:
            seed_chars = []
        if len(seed_chars) < self.block_size:
            temp_seed_chars = seed_chars
            seed_chars = self.__generate_random_seed_chars(self.block_size - len(seed_chars))
            seed_chars.extend(temp_seed_chars)
        elif len(seed_chars) > self.block_size:
            seed_chars = seed_chars[-self.block_size:]

        x = np.zeros((1, self.block_size))  # Input to the model, where each element is a char_id
        for i, char in enumerate(seed_chars):  # Populate x with char_ids from the chars in seed_chars
            x[0, i] = self.__char_to_id(char)

        # Predicts block_size chars, block_size - 1 of which overlap seed_chars, so we only want the last predicted char
        prediction = self.model.predict(x, verbose=0)[0][-1]

        # Different temperature if the last character was a digit (to prevent getting stuck in digit loops)
        this_temp = \
            digit_temperature if seed_chars[-1].isdigit() else temperature
        generated_char = self.__id_to_char(sample(prediction, temp=this_temp))

        # Append the new char to seed_chars and shift seed_chars so that its length remains block_size
        seed_chars = seed_chars[1:]
        seed_chars.append(generated_char)

        return generated_char, seed_chars

    def __generate_until(self,
                         until_char,
                         seed_chars=None,
                         temperature=0.4,
                         digit_temperature=1.2,
                         max_len=200,
                         print_progress=False):
        if print_progress:
            print("Generating chars until '" + until_char + "' with max length of " + str(max_len))
        chars = []
        # Duplicated code here :(
        if max_len is None:
            while True:
                next_char, seed_chars = \
                    self.__generate_next_char(seed_chars=seed_chars,
                                              temperature=temperature, digit_temperature=digit_temperature)
                chars.append(next_char)
                if print_progress:
                    print(next_char + ': "' + "".join(chars) + '"')
                if next_char == until_char:
                    break
        else:
            for i in range(max_len):
                next_char, seed_chars = \
                    self.__generate_next_char(seed_chars=seed_chars,
                                              temperature=temperature, digit_temperature=digit_temperature)
                chars.append(next_char)
                if print_progress:
                    print(next_char + ': "' + "".join(chars) + '"')
                if next_char == until_char:
                    break
        return chars, seed_chars

    def __generate_seed(self,
                        min_iters=15,
                        last_char=None,
                        max_until_last_char=5,
                        starting_seed_chars=None,
                        temperature=0.4,
                        digit_temperature=1.2,
                        print_progress=False):
        if print_progress:
            print("Generating seed with min iters: " + str(min_iters)
                  + ", last char: '"
                  + str(last_char)
                  + "', max until last char: "
                  + str(max_until_last_char) + "...")

        seed_chars = [] if starting_seed_chars is None else starting_seed_chars
        if min_iters == 0:
            temp_seed_chars = seed_chars
            seed_chars = self.__generate_random_seed_chars(self.block_size - len(temp_seed_chars))
            seed_chars.extend(temp_seed_chars)
            if len(seed_chars) > self.block_size:
                seed_chars = seed_chars[-self.block_size:]
            if print_progress:
                print("".join(seed_chars))
        else:
            for i in range(min_iters):
                _, seed_chars = \
                    self.__generate_next_char(seed_chars, temperature=temperature, digit_temperature=digit_temperature)
                if print_progress:
                    print("".join(seed_chars))

        if last_char is not None and max_until_last_char is not None and seed_chars[-1] is not last_char:
            if max_until_last_char >= 0:
                for i in range(max_until_last_char):
                    c, seed_chars = \
                        self.__generate_next_char(seed_chars,
                                                  temperature=temperature,
                                                  digit_temperature=digit_temperature)
                    if print_progress:
                        print("".join(seed_chars))
                    if c == last_char:
                        break
                else:
                    seed_chars.append(last_char)
                    seed_chars = seed_chars[1:]
            else:
                while True:
                    c, seed_chars = \
                        self.__generate_next_char(seed_chars,
                                                  temperature=temperature,
                                                  digit_temperature=digit_temperature)
                    if print_progress:
                        print("".join(seed_chars))
                    if c == last_char:
                        break

        if print_progress:
            print('Final seed chars generated: "' + "".join(seed_chars) + '"')
        return seed_chars[-self.block_size:]

    def __generate_random_seed_chars(self, size):
        seed_chars = []
        for i in np.random.randint(0, len(self.reversed_dictionary) - 1, size=size):
            seed_chars.append(self.__id_to_char(i))
        return seed_chars

    def __char_to_id(self, char):
        try:
            return self.char_to_id[char]
        except:
            return 0

    def __id_to_char(self, id):
        try:
            return self.reversed_dictionary[id]
        except:
            return "<unk>"


if __name__ == "__main__":
    generator = TextGenerator(model_path=sys.argv[1])

    while True:
        while True:
            try:
                inp = input("Num messages to generate | Random seed (separate with space):").split(" ")
                num_messages = int(inp[0])
                if len(inp) >= 2:
                    seed = int(inp[1])
                else:
                    seed = None
                break
            except ValueError:
                print("Error: Please enter an integer number")

        seed_chars = input("Enter seed chars: ").split()

        print("Generating...")
        messages, seed_chars = generator.generate_messages(num_messages=num_messages,
                                                           min_seed_chars_generated=0 if seed_chars else 10,
                                                           max_seed_chars_before_delimiter=None if seed_chars else 10,
                                                           seed_chars=seed_chars,
                                                           random_seed=seed,
                                                           print_progress=False)
        print("Final seed_chars: " + "".join(seed_chars))
        print("\nFinal text:\n---")
        for message in messages:
            print(message + "<Enter>")
        print("---")
